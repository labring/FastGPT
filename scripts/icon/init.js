import path from 'node:path';
import fs from 'node:fs/promises';
import prettier from 'prettier';
import process from 'node:process';

// 递归读取 packages/web/components/common/Icon/icons 下所有的 svg
async function findSvgFiles(dir, relativePath = '') {
  /** @type {string[]} */
  let svgFiles = [];

  const items = await fs.readdir(dir, { withFileTypes: true });

  for (const item of items) {
    const fullPath = path.join(dir, item.name);
    const relativeItemPath = path.join(relativePath, item.name);

    if (item.isDirectory()) {
      const nestedSvgs = await findSvgFiles(fullPath, relativeItemPath);
      svgFiles = svgFiles.concat(nestedSvgs);
    } else if (item.isFile() && item.name.endsWith('.svg')) {
      svgFiles.push(relativeItemPath);
    }
  }

  return svgFiles;
}

async function main() {
  const configFilePath = path.resolve(import.meta.dirname, '../../.prettierrc.js');

  // 读取 .prettierrc.js 文件
  /** @type {prettier.Config} */
  let config;
  try {
    config = (await import(configFilePath)).default;
  } catch (error) {
    console.error('读取 .prettierrc.js 失败', error);
    process.exit(1);
  }

  // 读取 SVG 文件
  const iconsDir = path.resolve(
    import.meta.dirname,
    '../../packages/web/components/common/Icon/icons'
  );
  const svgPaths = await findSvgFiles(iconsDir);

  // 生成导入语句
  let result = '';
  svgPaths.forEach((svgPath) => {
    const name = svgPath.split('.')[0];
    result += `\t'${name}': () => import('./icons/${svgPath}'),\n`;
  });

  // 生成文件内容
  const fileContent = `// @ts-nocheck
// DO NOT EDIT THIS FILE MANUALLY
// Generated by scripts/icon/init.js

export const iconPaths = {
${result}
};`;

  // 使用 prettier 格式化
  const formattedContent = await prettier.format(fileContent, {
    ...config,
    parser: 'typescript'
  });

  // 写入文件
  const outputPath = path.resolve(
    import.meta.dirname,
    '../../packages/web/components/common/Icon/constants.ts'
  );
  await fs.writeFile(outputPath, formattedContent);
  console.info(`✅✅✅ 已生成 ${svgPaths.length} 个图标的导入配置到 ${outputPath}`);
}

main();
