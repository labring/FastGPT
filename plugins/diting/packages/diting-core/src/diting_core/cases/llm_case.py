from enum import Enum
from typing import List, Optional, Dict, Any
from pydantic import BaseModel

from diting_core.utilities.validate import assert_fields_validity


class LLMCase(BaseModel):
    """
    A dataclass representing a test case for evaluating language model outputs.

    This class encapsulates the inputs, outputs, and context for a single test case,
    commonly used in metrics or evaluation frameworks for language models.

    Parameters
    ----------
    user_input : Optional[str], optional
        The input provided by the user. Default is `None`.
    actual_output : Optional[str], optional
        The output generated by the actual system. Default is `None`.
    expected_output : Optional[str], optional
        The expected output for the test case. Default is `None`.
    context : Optional[List[str]], optional
        A list of contextual information related to the test case. Default is `None`.
    retrieval_context : Optional[List[str]], optional
        A list of retrieved context documents or information. Default is `None`.

    Notes
    -----
    This class is designed as a dataclass for easy initialization and comparison
    of test cases. All parameters are optional and default to `None` if not provided.

    Examples
    --------
    >>> case = LLMCase(
    ...     user_input="What is the capital of France?",
    ...     actual_output="Paris",
    ...     expected_output="Paris",
    ...     context=["France", "Europe"],
    ...     retrieval_context=["Paris is the capital", "France's geography"]
    ... )
    >>> print(case.user_input)
    'What is the capital of France?'
    """

    user_input: Optional[str] = None
    actual_output: Optional[str] = None
    expected_output: Optional[str] = None
    context: Optional[List[str]] = None
    retrieval_context: Optional[List[str]] = None
    metadata: Optional[Dict[str, Any]] = None

    def __str__(self):
        return (
            f"LLMCase(user_input={self.user_input}, "
            f"actual_output={self.actual_output}, "
            f"expected_output={self.expected_output}, "
            f"context={self.context}, "
            f"retrieval_context={self.retrieval_context})"
        )


class LLMCaseParams(Enum):
    USER_INPUT = "user_input"
    ACTUAL_OUTPUT = "actual_output"
    EXPECTED_OUTPUT = "expected_output"
    CONTEXT = "context"
    RETRIEVAL_CONTEXT = "retrieval_context"


def assert_testcase_validity(
    operator_name: str,
    test_case: LLMCase,
    required_params: Optional[List[LLMCaseParams]],
) -> None:
    """
    Validate the test case to ensure required parameters are not None.

    Parameters
    ----------
    operator_name : str
        The name of the metric being validated, used for error message context.
    test_case : LLMCase
        The test case object to check, which should contain the required parameters as attributes.
    required_params : Optional[List[LLMCaseParams]]
        A list of required parameters (each with a `value` attribute) that must exist and be non-None in the test case.

    Raises
    ------
    ValueError
        If any required parameter is None, a ValueError is raised with a message listing the missing parameters.

    Notes
    -----
    This function checks the presence of required parameters in the test case using `getattr(test_case, param.value)`.
    If `required_params` is None, the validation is skipped.
    The error message is automatically formatted based on the number of missing parameters.
    """
    if required_params is None:
        return
    required_params_str = [param.value for param in required_params]

    assert_fields_validity(operator_name, test_case, required_params_str)
